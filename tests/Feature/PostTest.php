<?php

namespace Tests\Feature;

use App\Models\Post;
use Faker\Factory;
use Faker\Provider\Text;
use Symfony\Component\HttpFoundation\Response;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class PostTest extends TestCase
{
    private $token;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->withoutMiddleware([
            \App\Http\Middleware\Geetest::class,
            \App\Http\Middleware\Throttle::class,
        ]);

        $res = $this->post('/door/login', [
            'access' => 15958154647,
            'secret' => 'meiyoumima',
        ]);

        $this->token = $res->getOriginalContent()['data'];
    }

    /**
     * A basic test example.
     *
     * @return void
     */
    public function testPostWithVote()
    {
        $faker = Factory::create();
        $response = $this->json('POST', '/post/create', [
            'bangumiId' => 1,
            'title' => $faker->text(20),
            'desc' => $faker->text(20),
            'content' => $faker->text(20),
            'is_creator' => 1,
            'images' => [],
            'types' => Post::VOTE,
            'vote' => [
                'title' => $faker->text(20),
                'items' => [
                    [
                        'title' => $faker->text(20),
                    ],
                    [
                        'title' => $faker->text(20),
                    ],
                ],
            ]
        ], [
            'Authorization' => sprintf('Bearer %s', $this->token),
            'Content-Type' => 'application/json',
        ]);

        $response->assertStatus(Response::HTTP_CREATED);
    }

    public function testPost()
    {
        $faker = Factory::create();
        $response = $this->json('POST', '/post/create', [
            'bangumiId' => 1,
            'title' => $faker->text(21),
            'desc' => $faker->text(21),
            'content' => $faker->text(21),
            'is_creator' => 1,
            'types' => 0,
            'images' => [],
        ], [
            'Authorization' => sprintf('Bearer %s', $this->token),
            'Content-Type' => 'application/json',
        ]);

        $response->assertStatus(Response::HTTP_CREATED);
    }

    public function testShowPost()
    {
        $response = $this->get('/post/1/show');

        $response->assertStatus(Response::HTTP_OK);
    }

    public function testShowPostWithVote()
    {
        $response = $this->get('/post/272/show');

        $response->assertJsonStructure([
            'data' => [
                'post' => [
                    'vote' => [
                        'title',
                        'description',
                        'multiple',
                        'expired',
                        'items',
                    ],
                ],
            ],
        ]);

        $response->assertStatus(Response::HTTP_OK);
    }
}
