<?php

namespace Tests\Feature;

use App\Api\v1\Repositories\VoteRepository;
use App\Models\Post;
use Faker\Factory;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Symfony\Component\HttpFoundation\Response;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class VoteTest extends TestCase
{
    private $token;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->withoutMiddleware([
            \App\Http\Middleware\Geetest::class,
            \App\Http\Middleware\Throttle::class,
        ]);

        $res = $this->post('/door/login', [
            'access' => 15958154647,
            'secret' => 'meiyoumima',
        ]);

        $this->token = $res->getOriginalContent()['data'];
    }

    /**
     * A basic test example.
     *
     * @return void
     */
    public function testVoteVoted()
    {
        $response = $this->json('POST', '/vote/1/user', [
            'vote_item_id' => [1,],
        ], [
            'Authorization' => sprintf('Bearer %s', $this->token),
        ]);

        $response->assertStatus(Response::HTTP_CONFLICT);
    }

    public function testVote()
    {
        $faker = Factory::create();
        $vote = $this->json('POST', '/post/create', [
            'bangumiId' => 1,
            'title' => $faker->text(30),
            'desc' => $faker->text(30),
            'content' => $faker->text(30),
            'is_creator' => 1,
            'images' => [],
            'types' => Post::VOTE,
            'vote' => [
                'title' => $faker->text(33),
                'items' => [
                    [
                        'title' => $faker->text(33),
                    ],
                    [
                        'title' => $faker->text(30),
                    ],
                ],
            ]
        ], [
            'Authorization' => sprintf('Bearer %s', $this->token),
            'Content-Type' => 'application/json',
        ]);

        $postId = $vote->getOriginalContent()['data']['data'];
        $repository = new VoteRepository;
        $vote = $repository->getVoteByPostId($postId);

        $voteItemIds = [];
        foreach ($vote['items'] as $item) {
            $voteItemIds[] = $item['id'];
        }

        $response = $this->json('POST', '/vote/' . $vote['id'] . '/user', [
            'vote_item_id' => array_slice($voteItemIds, 0, 1),
        ], [
            'Authorization' => sprintf('Bearer %s', $this->token),
        ]);

        $response->assertStatus(Response::HTTP_CREATED);
    }

    public function testVoteNotComfortToItem()
    {
        $response = $this->json('POST', '/vote/2/user', [
            'vote_item_id' => [1],
        ], [
            'Authorization' => sprintf('Bearer %s', $this->token),
        ]);

        $response->assertStatus(Response::HTTP_NOT_FOUND);
    }

    public function testVoteExpired()
    {
        $faker = Factory::create();
        $vote = $this->json('POST', '/post/create', [
            'bangumiId' => 1,
            'title' => $faker->text(30),
            'desc' => $faker->text(30),
            'content' => $faker->text(30),
            'is_creator' => 1,
            'images' => [],
            'types' => Post::VOTE,
            'vote' => [
                'title' => $faker->text(30),
                'items' => [
                    [
                        'title' => $faker->text(30),
                    ],
                    [
                        'title' => $faker->text(30),
                    ],
                ],
                'expired_at' => time() - 10,
            ]
        ], [
            'Authorization' => sprintf('Bearer %s', $this->token),
            'Content-Type' => 'application/json',
        ]);

        $postId = $vote->getOriginalContent()['data']['data'];
        $repository = new VoteRepository;
        $vote = $repository->getVoteByPostId($postId);

        $voteItemIds = [];
        foreach ($vote['items'] as $item) {
            $voteItemIds[] = $item['id'];
        }

        $response = $this->json('POST', '/vote/' . $vote['id'] . '/user', [
            'vote_item_id' => array_slice($voteItemIds, 0, 1),
        ], [
            'Authorization' => sprintf('Bearer %s', $this->token),
        ]);

        $response->assertStatus(Response::HTTP_GONE);
    }

    public function testVoteNotExpired()
    {
        $faker = Factory::create();
        $vote = $this->json('POST', '/post/create', [
            'bangumiId' => 1,
            'title' => $faker->text(30),
            'desc' => $faker->text(33),
            'content' => $faker->text(30),
            'is_creator' => 1,
            'images' => [],
            'types' => Post::VOTE,
            'vote' => [
                'title' => $faker->text(30),
                'items' => [
                    [
                        'title' => $faker->text(33),
                    ],
                    [
                        'title' => $faker->text(30),
                    ],
                ],
                'expired_at' => time() + 1000,
            ]
        ], [
            'Authorization' => sprintf('Bearer %s', $this->token),
            'Content-Type' => 'application/json',
        ]);

        $postId = $vote->getOriginalContent()['data']['data'];
        $repository = new VoteRepository;
        $vote = $repository->getVoteByPostId($postId);

        $voteItemIds = [];
        foreach ($vote['items'] as $item) {
            $voteItemIds[] = $item['id'];
        }

        $response = $this->json('POST', '/vote/' . $vote['id'] . '/user', [
            'vote_item_id' => array_slice($voteItemIds, 0, 1),
        ], [
            'Authorization' => sprintf('Bearer %s', $this->token),
        ]);

        $response->assertStatus(Response::HTTP_CREATED);
    }

    public function testVoteMultiNotAllowed()
    {
        $faker = Factory::create();
        $vote = $this->json('POST', '/post/create', [
            'bangumiId' => 1,
            'title' => $faker->text(30),
            'desc' => $faker->text(33),
            'content' => $faker->text(30),
            'is_creator' => 1,
            'images' => [],
            'types' => Post::VOTE,
            'vote' => [
                'title' => $faker->text(30),
                'items' => [
                    [
                        'title' => $faker->text(33),
                    ],
                    [
                        'title' => $faker->text(30),
                    ],
                ],
                'expired_at' => time() + 1000,
            ]
        ], [
            'Authorization' => sprintf('Bearer %s', $this->token),
            'Content-Type' => 'application/json',
        ]);

        $postId = $vote->getOriginalContent()['data']['data'];
        $repository = new VoteRepository;
        $vote = $repository->getVoteByPostId($postId);

        $voteItemIds = [];
        foreach ($vote['items'] as $item) {
            $voteItemIds[] = $item['id'];
        }

        $response = $this->json('POST', '/vote/' . $vote['id'] . '/user', [
            'vote_item_id' => array_slice($voteItemIds, 0, 2),
        ], [
            'Authorization' => sprintf('Bearer %s', $this->token),
        ]);

        $response->assertStatus(Response::HTTP_BAD_REQUEST);
    }

    public function testVoteMultiAllowed()
    {
        $faker = Factory::create();
        $vote = $this->json('POST', '/post/create', [
            'bangumiId' => 1,
            'title' => $faker->text(30),
            'desc' => $faker->text(33),
            'content' => $faker->text(30),
            'is_creator' => 1,
            'images' => [],
            'types' => Post::VOTE,
            'vote' => [
                'title' => $faker->text(30),
                'items' => [
                    [
                        'title' => $faker->text(33),
                    ],
                    [
                        'title' => $faker->text(30),
                    ],
                ],
                'expired_at' => time() + 1000,
                'multiple' => 1,
            ]
        ], [
            'Authorization' => sprintf('Bearer %s', $this->token),
            'Content-Type' => 'application/json',
        ]);

        $postId = $vote->getOriginalContent()['data']['data'];
        $repository = new VoteRepository;
        $vote = $repository->getVoteByPostId($postId);

        $voteItemIds = [];
        foreach ($vote['items'] as $item) {
            $voteItemIds[] = $item['id'];
        }

        $response = $this->json('POST', '/vote/' . $vote['id'] . '/user', [
            'vote_item_id' => array_slice($voteItemIds, 0, 2),
        ], [
            'Authorization' => sprintf('Bearer %s', $this->token),
        ]);

        $response->assertStatus(Response::HTTP_CREATED);
    }
}
