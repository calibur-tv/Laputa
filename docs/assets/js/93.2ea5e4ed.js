(window.webpackJsonp=window.webpackJsonp||[]).push([[93],{369:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),s("p",[t._v("Monolog is available on Packagist ("),s("a",{attrs:{href:"http://packagist.org/packages/monolog/monolog",target:"_blank",rel:"noopener noreferrer"}},[t._v("monolog/monolog"),s("OutboundLink")],1),t._v(")\nand as such installable via "),s("a",{attrs:{href:"http://getcomposer.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Composer"),s("OutboundLink")],1),t._v(".")]),t._v(" "),t._m(3),s("p",[t._v("If you do not use Composer, you can grab the code from GitHub, and use any\nPSR-0 compatible autoloader (e.g. the "),s("a",{attrs:{href:"https://github.com/symfony/ClassLoader",target:"_blank",rel:"noopener noreferrer"}},[t._v("Symfony2 ClassLoader component"),s("OutboundLink")],1),t._v(")\nto load Monolog classes.")]),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),s("p",[t._v("Each Handler also has a Formatter, a default one with settings that make sense\nwill be created if you don't set one. The formatters normalize and format\nincoming records so that they can be used by the handlers to output useful\ninformation.")]),t._v(" "),s("p",[t._v("Custom severity levels are not available. Only the eight\n"),s("a",{attrs:{href:"http://tools.ietf.org/html/rfc5424",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 5424"),s("OutboundLink")],1),t._v(" levels (debug, info, notice,\nwarning, error, critical, alert, emergency) are present for basic filtering\npurposes, but for sorting and other use cases that would require\nflexibility, you should add Processors to the Logger that can add extra\ninformation (tags, user ip, ..) to the records before they are handled.")]),t._v(" "),t._m(8),t._v(" "),s("p",[t._v("Monolog supports the logging levels described by "),s("a",{attrs:{href:"http://tools.ietf.org/html/rfc5424",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 5424"),s("OutboundLink")],1),t._v(".")]),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),s("p",[t._v("Here is a basic setup to log to a file and to firephp on the DEBUG level:")]),t._v(" "),t._m(11),s("p",[t._v("Let's explain it. The first step is to create the logger instance which will\nbe used in your code. The argument is a channel name, which is useful when\nyou use several loggers (see below for more details about it).")]),t._v(" "),s("p",[t._v("The logger itself does not know how to handle a record. It delegates it to\nsome handlers. The code above registers two handlers in the stack to allow\nhandling records in two different ways.")]),t._v(" "),s("p",[t._v("Note that the FirePHPHandler is called first as it is added on top of the\nstack. This allows you to temporarily add a logger with bubbling disabled if\nyou want to override other configured loggers.")]),t._v(" "),s("blockquote",[s("p",[t._v("If you use Monolog standalone and are looking for an easy way to\nconfigure many handlers, the "),s("a",{attrs:{href:"https://github.com/theorchard/monolog-cascade",target:"_blank",rel:"noopener noreferrer"}},[t._v("theorchard/monolog-cascade"),s("OutboundLink")],1),t._v("\ncan help you build complex logging configs via PHP arrays, yaml or json configs.")])]),t._v(" "),t._m(12),t._v(" "),s("p",[t._v("Monolog provides two different ways to add extra informations along the simple\ntextual message.")]),t._v(" "),t._m(13),t._v(" "),s("p",[t._v("The first way is the context, allowing to pass an array of data along the\nrecord:")]),t._v(" "),t._m(14),s("p",[t._v("Simple handlers (like the StreamHandler for instance) will simply format\nthe array to a string but richer handlers can take advantage of the context\n(FirePHP is able to display arrays in pretty way for instance).")]),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),s("p",[t._v("Monolog provides some built-in processors that can be used in your project.\nLook at the "),s("a",{attrs:{href:"https://github.com/Seldaek/monolog/blob/master/doc/02-handlers-formatters-processors.md#processors",target:"_blank",rel:"noopener noreferrer"}},[t._v("dedicated chapter"),s("OutboundLink")],1),t._v(" for the list.")]),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),s("p",[t._v("Channels are a great way to identify to which part of the application a record\nis related. This is useful in big applications (and is leveraged by\nMonologBundle in Symfony2).")]),t._v(" "),s("p",[t._v("Picture two loggers sharing a handler that writes to a single log file.\nChannels would allow you to identify the logger that issued every record.\nYou can easily grep through the log files filtering this or that channel.")]),t._v(" "),t._m(20),t._m(21),t._v(" "),s("p",[t._v("In Monolog it's easy to customize the format of the logs written into files,\nsockets, mails, databases and other handlers. Most of the handlers use the")]),t._v(" "),t._m(22),s("p",[t._v("value to be automatically put into the log device. This value depends on the\nformatter settings. You can choose between predefined formatter classes or\nwrite your own (e.g. a multiline text file for human-readable output).")]),t._v(" "),s("p",[t._v("To configure a predefined formatter class, just set it as the handler's field:")]),t._v(" "),t._m(23),s("p",[t._v("You may also reuse the same formatter between multiple handlers and share those\nhandlers between multiple loggers.")]),t._v(" "),s("p",[s("router-link",{attrs:{to:"./02-handlers-formatters-processors.html"}},[t._v("Handlers, Formatters and Processors")]),t._v(" â†’")],1)])},[function(){var t=this.$createElement,a=this._self._c||t;return a("h1",{attrs:{id:"using-monolog"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-monolog","aria-hidden":"true"}},[this._v("#")]),this._v(" Using Monolog")])},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ul",[s("li",[s("a",{attrs:{href:"#installation"}},[t._v("Installation")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#core-concepts"}},[t._v("Core Concepts")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#log-levels"}},[t._v("Log Levels")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#configuring-a-logger"}},[t._v("Configuring a logger")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#adding-extra-data-in-the-records"}},[t._v("Adding extra data in the records")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#leveraging-channels"}},[t._v("Leveraging channels")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#customizing-the-log-format"}},[t._v("Customizing the log format")])])])},function(){var t=this.$createElement,a=this._self._c||t;return a("h2",{attrs:{id:"installation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#installation","aria-hidden":"true"}},[this._v("#")]),this._v(" Installation")])},function(){var t=this.$createElement,a=this._self._c||t;return a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[this._v("composer require monolog/monolog\n")])])])},function(){var t=this.$createElement,a=this._self._c||t;return a("h2",{attrs:{id:"core-concepts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#core-concepts","aria-hidden":"true"}},[this._v("#")]),this._v(" Core Concepts")])},function(){var t=this.$createElement,a=this._self._c||t;return a("p",[this._v("Every "),a("code",[this._v("Logger")]),this._v(" instance has a channel (name) and a stack of handlers. Whenever\nyou add a record to the logger, it traverses the handler stack. Each handler\ndecides whether it fully handled the record, and if so, the propagation of the\nrecord ends there.")])},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("p",[t._v("This allows for flexible logging setups, for example having a "),s("code",[t._v("StreamHandler")]),t._v(" at\nthe bottom of the stack that will log anything to disk, and on top of that add\na "),s("code",[t._v("MailHandler")]),t._v(" that will send emails only when an error message is logged.\nHandlers also have a "),s("code",[t._v("$bubble")]),t._v(" property which defines whether they block the\nrecord or not if they handled it. In this example, setting the "),s("code",[t._v("MailHandler")]),t._v("'s\n"),s("code",[t._v("$bubble")]),t._v(" argument to false means that records handled by the "),s("code",[t._v("MailHandler")]),t._v(" will\nnot propagate to the "),s("code",[t._v("StreamHandler")]),t._v(" anymore.")])},function(){var t=this.$createElement,a=this._self._c||t;return a("p",[this._v("You can create many "),a("code",[this._v("Logger")]),this._v("s, each defining a channel (e.g.: db, request,\nrouter, ..) and each of them combining various handlers, which can be shared\nor not. The channel is reflected in the logs and allows you to easily see or\nfilter records.")])},function(){var t=this.$createElement,a=this._self._c||t;return a("h2",{attrs:{id:"log-levels"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#log-levels","aria-hidden":"true"}},[this._v("#")]),this._v(" Log Levels")])},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ul",[s("li",[s("p",[s("strong",[t._v("DEBUG")]),t._v(" (100): Detailed debug information.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("INFO")]),t._v(" (200): Interesting events. Examples: User logs in, SQL logs.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("NOTICE")]),t._v(" (250): Normal but significant events.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("WARNING")]),t._v(" (300): Exceptional occurrences that are not errors. Examples:\nUse of deprecated APIs, poor use of an API, undesirable things that are not\nnecessarily wrong.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("ERROR")]),t._v(" (400): Runtime errors that do not require immediate action but\nshould typically be logged and monitored.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("CRITICAL")]),t._v(" (500): Critical conditions. Example: Application component\nunavailable, unexpected exception.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("ALERT")]),t._v(" (550): Action must be taken immediately. Example: Entire website\ndown, database unavailable, etc. This should trigger the SMS alerts and wake\nyou up.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("EMERGENCY")]),t._v(" (600): Emergency: system is unusable.")])])])},function(){var t=this.$createElement,a=this._self._c||t;return a("h2",{attrs:{id:"configuring-a-logger"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#configuring-a-logger","aria-hidden":"true"}},[this._v("#")]),this._v(" Configuring a logger")])},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{attrs:{class:"token php language-php"}},[s("span",{attrs:{class:"token delimiter important"}},[t._v("<?php")]),t._v("\n\n"),s("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),s("span",{attrs:{class:"token package"}},[t._v("Monolog"),s("span",{attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Logger")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),s("span",{attrs:{class:"token package"}},[t._v("Monolog"),s("span",{attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Handler"),s("span",{attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("StreamHandler")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),s("span",{attrs:{class:"token package"}},[t._v("Monolog"),s("span",{attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Handler"),s("span",{attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("FirePHPHandler")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{attrs:{class:"token comment"}},[t._v("// Create the logger")]),t._v("\n"),s("span",{attrs:{class:"token variable"}},[t._v("$logger")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("Logger")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'my_logger'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v("// Now add some handlers")]),t._v("\n"),s("span",{attrs:{class:"token variable"}},[t._v("$logger")]),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),s("span",{attrs:{class:"token function"}},[t._v("pushHandler")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("StreamHandler")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token constant"}},[t._v("__DIR__")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'/my_app.log'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Logger"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token constant"}},[t._v("DEBUG")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{attrs:{class:"token variable"}},[t._v("$logger")]),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),s("span",{attrs:{class:"token function"}},[t._v("pushHandler")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("FirePHPHandler")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{attrs:{class:"token comment"}},[t._v("// You can now use your logger")]),t._v("\n"),s("span",{attrs:{class:"token variable"}},[t._v("$logger")]),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),s("span",{attrs:{class:"token function"}},[t._v("addInfo")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'My logger is now ready'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])},function(){var t=this.$createElement,a=this._self._c||t;return a("h2",{attrs:{id:"adding-extra-data-in-the-records"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#adding-extra-data-in-the-records","aria-hidden":"true"}},[this._v("#")]),this._v(" Adding extra data in the records")])},function(){var t=this.$createElement,a=this._self._c||t;return a("h3",{attrs:{id:"using-the-logging-context"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-the-logging-context","aria-hidden":"true"}},[this._v("#")]),this._v(" Using the logging context")])},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{attrs:{class:"token php language-php"}},[s("span",{attrs:{class:"token delimiter important"}},[t._v("<?php")]),t._v("\n\n"),s("span",{attrs:{class:"token variable"}},[t._v("$logger")]),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),s("span",{attrs:{class:"token function"}},[t._v("addInfo")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'Adding a new user'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("array")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'username'")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'Seldaek'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])},function(){var t=this.$createElement,a=this._self._c||t;return a("h3",{attrs:{id:"using-processors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-processors","aria-hidden":"true"}},[this._v("#")]),this._v(" Using processors")])},function(){var t=this.$createElement,a=this._self._c||t;return a("p",[this._v("The second way is to add extra data for all records by using a processor.\nProcessors can be any callable. They will get the record as parameter and\nmust return it after having eventually changed the "),a("code",[this._v("extra")]),this._v(" part of it. Let's\nwrite a processor adding some dummy data in the record:")])},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{attrs:{class:"token php language-php"}},[s("span",{attrs:{class:"token delimiter important"}},[t._v("<?php")]),t._v("\n\n"),s("span",{attrs:{class:"token variable"}},[t._v("$logger")]),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),s("span",{attrs:{class:"token function"}},[t._v("pushProcessor")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token variable"}},[t._v("$record")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token variable"}},[t._v("$record")]),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'extra'")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'dummy'")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'Hello world!'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{attrs:{class:"token variable"}},[t._v("$record")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])},function(){var t=this.$createElement,a=this._self._c||t;return a("blockquote",[a("p",[this._v("Tip: processors can also be registered on a specific handler instead of\nthe logger to apply only for this handler.")])])},function(){var t=this.$createElement,a=this._self._c||t;return a("h2",{attrs:{id:"leveraging-channels"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#leveraging-channels","aria-hidden":"true"}},[this._v("#")]),this._v(" Leveraging channels")])},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{attrs:{class:"token php language-php"}},[s("span",{attrs:{class:"token delimiter important"}},[t._v("<?php")]),t._v("\n\n"),s("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),s("span",{attrs:{class:"token package"}},[t._v("Monolog"),s("span",{attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Logger")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),s("span",{attrs:{class:"token package"}},[t._v("Monolog"),s("span",{attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Handler"),s("span",{attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("StreamHandler")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),s("span",{attrs:{class:"token package"}},[t._v("Monolog"),s("span",{attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Handler"),s("span",{attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("FirePHPHandler")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{attrs:{class:"token comment"}},[t._v("// Create some handlers")]),t._v("\n"),s("span",{attrs:{class:"token variable"}},[t._v("$stream")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("StreamHandler")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token constant"}},[t._v("__DIR__")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'/my_app.log'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Logger"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token constant"}},[t._v("DEBUG")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{attrs:{class:"token variable"}},[t._v("$firephp")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("FirePHPHandler")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{attrs:{class:"token comment"}},[t._v("// Create the main logger of the app")]),t._v("\n"),s("span",{attrs:{class:"token variable"}},[t._v("$logger")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("Logger")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'my_logger'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{attrs:{class:"token variable"}},[t._v("$logger")]),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),s("span",{attrs:{class:"token function"}},[t._v("pushHandler")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token variable"}},[t._v("$stream")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{attrs:{class:"token variable"}},[t._v("$logger")]),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),s("span",{attrs:{class:"token function"}},[t._v("pushHandler")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token variable"}},[t._v("$firephp")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{attrs:{class:"token comment"}},[t._v("// Create a logger for the security-related stuff with a different channel")]),t._v("\n"),s("span",{attrs:{class:"token variable"}},[t._v("$securityLogger")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("Logger")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'security'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{attrs:{class:"token variable"}},[t._v("$securityLogger")]),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),s("span",{attrs:{class:"token function"}},[t._v("pushHandler")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token variable"}},[t._v("$stream")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{attrs:{class:"token variable"}},[t._v("$securityLogger")]),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),s("span",{attrs:{class:"token function"}},[t._v("pushHandler")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token variable"}},[t._v("$firephp")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{attrs:{class:"token comment"}},[t._v("// Or clone the first one to only change the channel")]),t._v("\n"),s("span",{attrs:{class:"token variable"}},[t._v("$securityLogger")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token variable"}},[t._v("$logger")]),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),s("span",{attrs:{class:"token function"}},[t._v("withName")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'security'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])},function(){var t=this.$createElement,a=this._self._c||t;return a("h2",{attrs:{id:"customizing-the-log-format"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#customizing-the-log-format","aria-hidden":"true"}},[this._v("#")]),this._v(" Customizing the log format")])},function(){var t=this.$createElement,a=this._self._c||t;return a("div",{staticClass:"language-php extra-class"},[a("pre",{pre:!0,attrs:{class:"language-php"}},[a("code",[a("span",{attrs:{class:"token variable"}},[this._v("$record")]),a("span",{attrs:{class:"token punctuation"}},[this._v("[")]),a("span",{attrs:{class:"token single-quoted-string string"}},[this._v("'formatted'")]),a("span",{attrs:{class:"token punctuation"}},[this._v("]")]),this._v("\n")])])])},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{attrs:{class:"token comment"}},[t._v('// the default date format is "Y-m-d H:i:s"')]),t._v("\n"),s("span",{attrs:{class:"token variable"}},[t._v("$dateFormat")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token double-quoted-string string"}},[t._v('"Y n j, g:i a"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v('// the default output format is "[%datetime%] %channel%.%level_name%: %message% %context% %extra%\\n"')]),t._v("\n"),s("span",{attrs:{class:"token variable"}},[t._v("$output")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token double-quoted-string string"}},[t._v('"%datetime% > %level_name% > %message% %context% %extra%\\n"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v("// finally, create a formatter")]),t._v("\n"),s("span",{attrs:{class:"token variable"}},[t._v("$formatter")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("LineFormatter")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token variable"}},[t._v("$output")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token variable"}},[t._v("$dateFormat")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{attrs:{class:"token comment"}},[t._v("// Create a handler")]),t._v("\n"),s("span",{attrs:{class:"token variable"}},[t._v("$stream")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("StreamHandler")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token constant"}},[t._v("__DIR__")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'/my_app.log'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Logger"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token constant"}},[t._v("DEBUG")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{attrs:{class:"token variable"}},[t._v("$stream")]),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),s("span",{attrs:{class:"token function"}},[t._v("setFormatter")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token variable"}},[t._v("$formatter")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v("// bind it to a logger object")]),t._v("\n"),s("span",{attrs:{class:"token variable"}},[t._v("$securityLogger")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("Logger")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'security'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{attrs:{class:"token variable"}},[t._v("$securityLogger")]),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),s("span",{attrs:{class:"token function"}},[t._v("pushHandler")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token variable"}},[t._v("$stream")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])}],!1,null,null,null);a.default=e.exports}}]);