(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{319:function(e,t,r){"use strict";r.r(t);var n=r(0),a=Object(n.a)({},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",{staticClass:"content"},[e._m(0),e._v(" "),e._m(1),e._v(" "),e._m(2),e._v(" "),r("p",[e._v("Before:")]),e._v(" "),e._m(3),e._v(" "),r("p",[e._v("After:")]),e._v(" "),e._m(4),e._v(" "),e._m(5),e._v(" "),r("p",[e._v("Before:")]),e._v(" "),e._m(6),e._v(" "),r("p",[e._v("After:")]),e._v(" "),e._m(7),e._v(" "),e._m(8),e._v(" "),e._m(9),e._v(" "),e._m(10),e._v(" "),e._m(11),e._v(" "),e._m(12),e._v(" "),e._m(13),e._v(" "),e._m(14),e._v(" "),e._m(15),e._v(" "),e._m(16),e._v(" "),e._m(17),e._v(" "),e._m(18),e._v(" "),e._m(19),e._v(" "),e._m(20),e._v(" "),e._m(21),e._v(" "),e._m(22),e._v(" "),e._m(23),e._v(" "),e._m(24),e._v(" "),e._m(25),e._v(" "),e._m(26),e._v(" "),e._m(27),e._v(" "),e._m(28),e._v(" "),e._m(29),e._v(" "),e._m(30),e._v(" "),e._m(31),e._v(" "),e._m(32),e._v(" "),e._m(33),e._v(" "),r("p",[e._v('Before 2.3 the Oracle Session Init did not care about the numeric character of the Session.\nThis could lead to problems on non english locale systems that required a comma as a floating\npoint seperator in Oracle. Since 2.3, using the Oracle Session Init on connection start the\nclient session will be altered to set the numeric character to ".,":')]),e._v(" "),e._m(34),e._v(" "),r("p",[e._v("See "),r("a",{attrs:{href:"http://www.doctrine-project.org/jira/browse/DBAL-345",target:"_blank",rel:"noopener noreferrer"}},[e._v("DBAL-345"),r("OutboundLink")],1),e._v(" for more details.")]),e._v(" "),e._m(35),e._v(" "),r("p",[e._v("The query related methods including but not limited to executeQuery, exec, query, and executeUpdate\nnow wrap the driver exceptions such as PDOException with DBALException to add more debugging\ninformation such as the executed SQL statement, and any bound parameters.")]),e._v(" "),e._m(36),e._v(" "),r("p",[e._v("Before:")]),e._v(" "),e._m(37),e._v(" "),r("p",[e._v("After:")]),e._v(" "),e._m(38),e._v(" "),e._m(39),e._v(" "),r("p",[e._v("This method only worked on MySQL and it is considered unsafe on MySQL to use SET NAMES UTF-8 instead\nof setting the charset directly on connection already. Replace this behavior with the\nconnection charset option:")]),e._v(" "),r("p",[e._v("Before:")]),e._v(" "),e._m(40),e._v(" "),r("p",[e._v("After:")]),e._v(" "),e._m(41),e._v(" "),e._m(42),e._v(" "),r("p",[e._v("Doctrine\\DBAL\\Schema\\Table#renameColumn() was removed, because it drops and recreates\nthe column instead. There is no fix available, because a schema diff\ncannot reliably detect if a column was renamed or one column was created\nand another one dropped.")]),e._v(" "),r("p",[e._v("You should use explicit SQL ALTER TABLE statements to change columns names.")]),e._v(" "),e._m(43),e._v(" "),r("p",[e._v("The Filter Schema assets expression is not wrapped in () anymore for the regexp automatically.")]),e._v(" "),r("p",[e._v("Before:")]),e._v(" "),e._m(44),e._v(" "),r("p",[e._v("After:")]),e._v(" "),e._m(45),e._v(" "),e._m(46),e._v(" "),r("p",[e._v("If you are creating a new MySQL Table through the Doctrine API, charset/collate are\nnow set to 'utf8'/'utf8_unicode_ci' by default. Previously the MySQL server defaults were used.")]),e._v(" "),e._m(47),e._v(" "),e._m(48),e._v(" "),r("p",[e._v("Both methods now accept an optional last parameter $types with binding types of the values passed.\nThis can potentially break child classes that have overwritten one of these methods.")]),e._v(" "),e._m(49),e._v(" "),r("p",[e._v('Doctrine\\DBAL\\Connection#executeQuery() got a new last parameter "QueryCacheProfile $qcp"')]),e._v(" "),e._m(50),e._v(" "),r("p",[e._v("The Driver statement was split into a ResultStatement and the normal statement extending from it.\nThis separates the configuration and the retrieval API from a statement.")]),e._v(" "),e._m(51),e._v(" "),r("p",[e._v("The MsSqlPlatform was renamed to SQLServerPlatform, the MsSqlSchemaManager was renamed\nto SQLServerSchemaManager.")]),e._v(" "),e._m(52),e._v(" "),r("p",[e._v("DBAL 2.1 and before were actually only compatible to SQL Server 2008, not earlier versions.\nStill other parts of the platform did use old features instead of newly introduced datatypes\nin SQL Server 2005. Starting with DBAL 2.2 you can pick the Doctrine abstraction exactly\nmatching your SQL Server version.")]),e._v(" "),e._m(53),e._v(" "),e._m(54),e._v(" "),e._m(55),e._v(" "),e._m(56),e._v(" "),e._m(57),e._v(" "),r("p",[e._v("To use the old SQL Server Platform, because you are using SQL Server 2003 and below use\nthe following configuration code:")]),e._v(" "),e._m(58)])},[function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"upgrade-to-2-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#upgrade-to-2-6","aria-hidden":"true"}},[this._v("#")]),this._v(" Upgrade to 2.6")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"minor-bc-break-fetch-and-fetchall-method-signatures-in-doctrine-dbal-driver-resultstatement"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#minor-bc-break-fetch-and-fetchall-method-signatures-in-doctrine-dbal-driver-resultstatement","aria-hidden":"true"}},[this._v("#")]),this._v(" MINOR BC BREAK: "),t("code",[this._v("fetch()")]),this._v(" and "),t("code",[this._v("fetchAll()")]),this._v(" method signatures in "),t("code",[this._v("Doctrine\\DBAL\\Driver\\ResultStatement")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ol",[t("li",[t("code",[this._v("Doctrine\\DBAL\\Driver\\ResultStatement::fetch()")]),this._v(" now has 3 arguments instead of 1, respecting\n"),t("code",[this._v("PDO::fetch()")]),this._v(" signature.")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("Doctrine\\DBAL\\Driver\\ResultStatement::fetch($fetchMode);\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("Doctrine\\DBAL\\Driver\\ResultStatement::fetch($fetchMode, $cursorOrientation, $cursorOffset);\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ol",{attrs:{start:"2"}},[t("li",[t("code",[this._v("Doctrine\\DBAL\\Driver\\ResultStatement::fetchAll()")]),this._v(" now has 3 arguments instead of 1, respecting\n"),t("code",[this._v("PDO::fetchAll()")]),this._v(" signature.")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("Doctrine\\DBAL\\Driver\\ResultStatement::fetchAll($fetchMode);\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("Doctrine\\DBAL\\Driver\\ResultStatement::fetch($fetchMode, $fetchArgument, $ctorArgs);\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"minor-bc-break-url-style-dsn-with-percentage-sign-in-password"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#minor-bc-break-url-style-dsn-with-percentage-sign-in-password","aria-hidden":"true"}},[this._v("#")]),this._v(" MINOR BC BREAK: URL-style DSN with percentage sign in password")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("URL-style DSNs (e.g. "),t("code",[this._v("mysql://foo@bar:localhost/db")]),this._v(") are now assumed to be percent-encoded\nin order to allow certain special characters in usernames, paswords and database names. If\nyou are using a URL-style DSN and have a username, password or database name containing a\npercentage sign, you need to update your DSN. If your password is, say, "),t("code",[this._v("foo%foo")]),this._v(", it\nshould be encoded as "),t("code",[this._v("foo%25foo")]),this._v(".")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"upgrade-to-2-5-1"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#upgrade-to-2-5-1","aria-hidden":"true"}},[this._v("#")]),this._v(" Upgrade to 2.5.1")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"minor-bc-break-doctrine-dbal-schema-table"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#minor-bc-break-doctrine-dbal-schema-table","aria-hidden":"true"}},[this._v("#")]),this._v(" MINOR BC BREAK: Doctrine\\DBAL\\Schema\\Table")])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("p",[e._v("When adding indexes to "),r("code",[e._v("Doctrine\\DBAL\\Schema\\Table")]),e._v(" via "),r("code",[e._v("addIndex()")]),e._v(" or "),r("code",[e._v("addUniqueIndex()")]),e._v(",\nduplicate indexes are not silently ignored/dropped anymore (based on semantics, not naming!).\nDuplicate indexes are considered indexes that pass "),r("code",[e._v("isFullfilledBy()")]),e._v(" or "),r("code",[e._v("overrules()")]),e._v("\nin "),r("code",[e._v("Doctrine\\DBAL\\Schema\\Index")]),e._v('.\nThis is required to make the index renaming feature introduced in 2.5.0 work properly and avoid\nissues in the ORM schema tool / DBAL schema manager which pretends users from updating\ntheir schemas and migrate to DBAL 2.5.*.\nAdditionally it offers more flexibility in declaring indexes for the user and potentially fixes\nrelated issues in the ORM.\nWith this change, the responsibility to decide which index is a "duplicate" is completely deferred\nto the user.\nPlease also note that adding foreign key constraints to a table via '),r("code",[e._v("addForeignKeyConstraint()")]),e._v(",\n"),r("code",[e._v("addUnnamedForeignKeyConstraint()")]),e._v(" or "),r("code",[e._v("addNamedForeignKeyConstraint()")]),e._v(" now first checks if an\nappropriate index is already present and avoids adding an additional auto-generated one eventually.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"upgrade-to-2-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#upgrade-to-2-5","aria-hidden":"true"}},[this._v("#")]),this._v(" Upgrade to 2.5")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"bc-break-time-type-resets-date-fields-to-unix-epoch"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bc-break-time-type-resets-date-fields-to-unix-epoch","aria-hidden":"true"}},[this._v("#")]),this._v(" BC BREAK: time type resets date fields to UNIX epoch")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("When mapping "),t("code",[this._v("time")]),this._v(" type field to PHP's "),t("code",[this._v("DateTime")]),this._v(" instance all unused date fields are\nreset to UNIX epoch (i.e. 1970-01-01). This might break any logic which relies on comparing\n"),t("code",[this._v("DateTime")]),this._v(" instances with date fields set to the current date.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Use "),t("code",[this._v("!")]),this._v(" format prefix (see http://php.net/manual/en/datetime.createfromformat.php) for parsing\ntime strings to prevent having different date fields when comparing user input and "),t("code",[this._v("DateTime")]),this._v("\ninstances as mapped by Doctrine.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"bc-break-doctrine-dbal-schema-table"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bc-break-doctrine-dbal-schema-table","aria-hidden":"true"}},[this._v("#")]),this._v(" BC BREAK: Doctrine\\DBAL\\Schema\\Table")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("The methods "),t("code",[this._v("addIndex()")]),this._v(" and "),t("code",[this._v("addUniqueIndex()")]),this._v(" in "),t("code",[this._v("Doctrine\\DBAL\\Schema\\Table")]),this._v("\nhave an additional, optional parameter. If you override these methods, you should\nadd this new parameter to the declaration of your overridden methods.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"bc-break-doctrine-dbal-connection"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bc-break-doctrine-dbal-connection","aria-hidden":"true"}},[this._v("#")]),this._v(" BC BREAK: Doctrine\\DBAL\\Connection")])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("p",[e._v("The visibility of the property "),r("code",[e._v("$_platform")]),e._v(" in "),r("code",[e._v("Doctrine\\DBAL\\Connection")]),e._v("\nwas changed from protected to private. If you have subclassed "),r("code",[e._v("Doctrine\\DBAL\\Connection")]),e._v("\nin your application and accessed "),r("code",[e._v("$_platform")]),e._v(" directly, you have to change the code\nportions to use "),r("code",[e._v("getDatabasePlatform()")]),e._v(" instead to retrieve the underlying database\nplatform.\nThe reason for this change is the new automatic platform version detection feature,\nwhich lazily evaluates the appropriate platform class to use for the underlying database\nserver version at runtime.\nPlease also note, that calling "),r("code",[e._v("getDatabasePlatform()")]),e._v(" now needs to establish a connection\nin order to evaluate the appropriate platform class if "),r("code",[e._v("Doctrine\\DBAL\\Connection")]),e._v(" is not\nalready connected. Under the following circumstances, it is not possible anymore to retrieve\nthe platform instance from the connection object without having to do a real connect:")])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ol",[r("li",[r("code",[e._v("Doctrine\\DBAL\\Connection")]),e._v(" was instantiated without the "),r("code",[e._v("platform")]),e._v(" connection parameter.")]),e._v(" "),r("li",[r("code",[e._v("Doctrine\\DBAL\\Connection")]),e._v(" was instantiated without the "),r("code",[e._v("serverVersion")]),e._v(" connection parameter.")]),e._v(" "),r("li",[e._v('The underlying driver is "version aware" and can provide different platform instances\nfor different versions.')]),e._v(" "),r("li",[e._v('The underlying driver connection is "version aware" and can provide the database server\nversion without having to query for it.')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("If one of the above conditions is NOT met, there is no need for "),t("code",[this._v("Doctrine\\DBAL\\Connection")]),this._v("\nto do a connect when calling "),t("code",[this._v("getDatabasePlatform()")]),this._v(".")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"datetime-type-uses-date-create-as-fallback"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#datetime-type-uses-date-create-as-fallback","aria-hidden":"true"}},[this._v("#")]),this._v(" datetime Type uses date_create() as fallback")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Before 2.5 the DateTime type always required a specific format, defined in\n"),t("code",[this._v("$platform->getDateTimeFormatString()")]),this._v(", which could cause quite some troubles\non platforms that had various microtime precision formats. Starting with 2.5\nwhenever the parsing of a date fails with the predefined platform format,\nthe "),t("code",[this._v("date_create()")]),this._v(" function will be used to parse the date.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("This could cause some troubles when your date format is weird and not parsed\ncorrectly by "),t("code",[this._v("date_create")]),this._v(", however since databases are rather strict on dates\nthere should be no problem.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"support-for-pdo-ibm-driver-removed"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#support-for-pdo-ibm-driver-removed","aria-hidden":"true"}},[this._v("#")]),this._v(" Support for pdo_ibm driver removed")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("The "),t("code",[this._v("pdo_ibm")]),this._v(" driver is buggy and does not work well with Doctrine. Therefore it will no\nlonger be supported and has been removed from the "),t("code",[this._v("Doctrine\\DBAL\\DriverManager")]),this._v(" drivers\nmap. It is highly encouraged to to use "),t("code",[this._v("ibm_db2")]),this._v(" driver instead if you want to connect\nto an IBM DB2 database as it is much more stable and secure.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("If for some reason you have to utilize the "),t("code",[this._v("pdo_ibm")]),this._v(" driver you can still use the "),t("code",[this._v("driverClass")]),this._v("\nconnection parameter to explicitly specify the "),t("code",[this._v("Doctrine\\DBAL\\Driver\\PDOIbm\\Driver")]),this._v(" class.\nHowever be aware that you are doing this at your own risk and it will not be guaranteed that\nDoctrine will work as expected.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"upgrade-to-2-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#upgrade-to-2-4","aria-hidden":"true"}},[this._v("#")]),this._v(" Upgrade to 2.4")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"doctrine-dbal-schema-constraint"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#doctrine-dbal-schema-constraint","aria-hidden":"true"}},[this._v("#")]),this._v(" Doctrine\\DBAL\\Schema\\Constraint")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("If you have custom classes that implement the constraint interface, you have to implement\nan additional method "),t("code",[this._v("getQuotedColumns")]),this._v(" now. This method is used to build proper constraint\nSQL for columns that need to be quoted, like keywords reserved by the specific platform used.\nThe method has to return the same values as "),t("code",[this._v("getColumns")]),this._v(" only that those column names that\nneed quotation have to be returned quoted for the given platform.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"upgrade-to-2-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#upgrade-to-2-3","aria-hidden":"true"}},[this._v("#")]),this._v(" Upgrade to 2.3")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"oracle-session-init-now-sets-numeric-character"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#oracle-session-init-now-sets-numeric-character","aria-hidden":"true"}},[this._v("#")]),this._v(" Oracle Session Init now sets Numeric Character")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("ALTER SESSION SET NLS_NUMERIC_CHARACTERS = '.,'\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"doctrine-dbal-connection-and-doctrine-dbal-statement"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#doctrine-dbal-connection-and-doctrine-dbal-statement","aria-hidden":"true"}},[this._v("#")]),this._v(" Doctrine\\DBAL\\Connection and Doctrine\\DBAL\\Statement")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("If you want to retrieve the driver specific exception, you can retrieve it by calling the\n"),t("code",[this._v("getPrevious()")]),this._v(" method on DBALException.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("catch(\\PDOException $ex) {\n    // ...\n}\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("catch(\\Doctrine\\DBAL\\DBALException $ex) {\n    $pdoException = $ex->getPrevious();\n    // ...\n}\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"doctrine-dbal-connection-setcharsetsql-removed"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#doctrine-dbal-connection-setcharsetsql-removed","aria-hidden":"true"}},[this._v("#")]),this._v(" Doctrine\\DBAL\\Connection#setCharsetSQL() removed")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("$conn = DriverManager::getConnection(array(..));\n$conn->setCharset('UTF8');\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("$conn = DriverManager::getConnection(array('charset' => 'UTF8', ..));\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"doctrine-dbal-schema-table-renamecolumn-removed"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#doctrine-dbal-schema-table-renamecolumn-removed","aria-hidden":"true"}},[this._v("#")]),this._v(" Doctrine\\DBAL\\Schema\\Table#renameColumn() removed")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"schema-filter-paths"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#schema-filter-paths","aria-hidden":"true"}},[this._v("#")]),this._v(" Schema Filter paths")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("$config->setFilterSchemaAssetsExpression('foo');\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("$config->setFilterSchemaAssetsExpression('(foo)');\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"creating-mysql-tables-now-defaults-to-utf-8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#creating-mysql-tables-now-defaults-to-utf-8","aria-hidden":"true"}},[this._v("#")]),this._v(" Creating MySQL Tables now defaults to UTF-8")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"upgrade-to-2-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#upgrade-to-2-2","aria-hidden":"true"}},[this._v("#")]),this._v(" Upgrade to 2.2")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"doctrine-dbal-connection-insert-and-doctrine-dbal-connection-update"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#doctrine-dbal-connection-insert-and-doctrine-dbal-connection-update","aria-hidden":"true"}},[this._v("#")]),this._v(" Doctrine\\DBAL\\Connection#insert and Doctrine\\DBAL\\Connection#update")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"doctrine-dbal-connection-executequery"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#doctrine-dbal-connection-executequery","aria-hidden":"true"}},[this._v("#")]),this._v(" Doctrine\\DBAL\\Connection#executeQuery")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"doctrine-dbal-driver-statement-split"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#doctrine-dbal-driver-statement-split","aria-hidden":"true"}},[this._v("#")]),this._v(" Doctrine\\DBAL\\Driver\\Statement split")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"mssql-platform-schemamanager-renamed"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mssql-platform-schemamanager-renamed","aria-hidden":"true"}},[this._v("#")]),this._v(" MsSql Platform/SchemaManager renamed")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"cleanup-sqlserver-platform-version-mess"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cleanup-sqlserver-platform-version-mess","aria-hidden":"true"}},[this._v("#")]),this._v(" Cleanup SQLServer Platform version mess")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("The PDO SqlSrv driver now uses the new "),t("code",[this._v("SQLServer2008Platform")]),this._v(' as default platform.\nThis platform uses new features of SQL Server as of version 2008. This also includes a switch\nin the used fields for "text" and "blob" field types to:')])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v('"text" => "VARCHAR(MAX)"\n"blob" => "VARBINARY(MAX)"\n')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Additionally "),t("code",[this._v("SQLServerPlatform")]),this._v(' in DBAL 2.1 and before used "DATE", "TIME" and "DATETIME2" for dates.\nThis types are only available since version 2008 and the introduction of an explicit\nSQLServer 2008 platform makes this dependency explicit.')])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("An "),t("code",[this._v("SQLServer2005Platform")]),this._v(" was also introduced to differentiate the features between\nversions 2003, earlier and 2005.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("With this change the "),t("code",[this._v("SQLServerPlatform")]),this._v(" now throws an exception for using limit queries\nwith an offset, since SQLServer 2003 and lower do not support this feature.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("use Doctrine\\DBAL\\DriverManager;\nuse Doctrine\\DBAL\\Platforms\\SQLServerPlatform;\nuse Doctrine\\DBAL\\Platforms\\SQLServer2005Platform;\n\n// You are using SQL Server 2003 or earlier\n$conn = DriverManager::getConnection(array(\n    'driver' => 'pdo_sqlsrv',\n    'platform' => new SQLServerPlatform()\n    // .. additional parameters\n));\n\n// You are using SQL Server 2005\n$conn = DriverManager::getConnection(array(\n    'driver' => 'pdo_sqlsrv',\n    'platform' => new SQLServer2005Platform()\n    // .. additional parameters\n));\n\n// You are using SQL Server 2008\n$conn = DriverManager::getConnection(array(\n    'driver' => 'pdo_sqlsrv',\n    // 2008 is default platform\n    // .. additional parameters\n));\n")])])}],!1,null,null,null);t.default=a.exports}}]);