(window.webpackJsonp=window.webpackJsonp||[]).push([[235],{177:function(e,t,a){"use strict";a.r(t);var s=a(0),o=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"changelog"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#changelog","aria-hidden":"true"}},[e._v("#")]),e._v(" CHANGELOG")]),e._v(" "),a("h2",{attrs:{id:"_3-4-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-0","aria-hidden":"true"}},[e._v("#")]),e._v(" 3.4.0")]),e._v(" "),a("ul",[a("li",[e._v("implemented PHP 7.0's "),a("code",[e._v("SessionUpdateTimestampHandlerInterface")]),e._v(" with a new\n"),a("code",[e._v("AbstractSessionHandler")]),e._v(" base class and a new "),a("code",[e._v("StrictSessionHandler")]),e._v(" wrapper")]),e._v(" "),a("li",[e._v("deprecated the "),a("code",[e._v("WriteCheckSessionHandler")]),e._v(", "),a("code",[e._v("NativeSessionHandler")]),e._v(" and "),a("code",[e._v("NativeProxy")]),e._v(" classes")]),e._v(" "),a("li",[e._v("deprecated setting session save handlers that do not implement "),a("code",[e._v("\\SessionHandlerInterface")]),e._v(" in "),a("code",[e._v("NativeSessionStorage::setSaveHandler()")])]),e._v(" "),a("li",[e._v("deprecated using "),a("code",[e._v("MongoDbSessionHandler")]),e._v(" with the legacy mongo extension; use it with the mongodb/mongodb package and ext-mongodb instead")]),e._v(" "),a("li",[e._v("deprecated "),a("code",[e._v("MemcacheSessionHandler")]),e._v("; use "),a("code",[e._v("MemcachedSessionHandler")]),e._v(" instead")])]),e._v(" "),a("h2",{attrs:{id:"_3-3-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-0","aria-hidden":"true"}},[e._v("#")]),e._v(" 3.3.0")]),e._v(" "),a("ul",[a("li",[e._v("the "),a("code",[e._v("Request::setTrustedProxies()")]),e._v(" method takes a new "),a("code",[e._v("$trustedHeaderSet")]),e._v(" argument,\nsee http://symfony.com/doc/current/components/http_foundation/trusting_proxies.html for more info,")]),e._v(" "),a("li",[e._v("deprecated the "),a("code",[e._v("Request::setTrustedHeaderName()")]),e._v(" and "),a("code",[e._v("Request::getTrustedHeaderName()")]),e._v(" methods,")]),e._v(" "),a("li",[e._v("added "),a("code",[e._v("File\\Stream")]),e._v(", to be passed to "),a("code",[e._v("BinaryFileResponse")]),e._v(" when the size of the served file is unknown,\ndisabling "),a("code",[e._v("Range")]),e._v(" and "),a("code",[e._v("Content-Length")]),e._v(" handling, switching to chunked encoding instead")]),e._v(" "),a("li",[e._v("added the "),a("code",[e._v("Cookie::fromString()")]),e._v(" method that allows to create a cookie from a\nraw header string")])]),e._v(" "),a("h2",{attrs:{id:"_3-1-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-0","aria-hidden":"true"}},[e._v("#")]),e._v(" 3.1.0")]),e._v(" "),a("ul",[a("li",[e._v("Added support for creating "),a("code",[e._v("JsonResponse")]),e._v(" with a string of JSON data")])]),e._v(" "),a("h2",{attrs:{id:"_3-0-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-0-0","aria-hidden":"true"}},[e._v("#")]),e._v(" 3.0.0")]),e._v(" "),a("ul",[a("li",[e._v("The precedence of parameters returned from "),a("code",[e._v("Request::get()")]),e._v(' changed from "GET, PATH, BODY" to "PATH, GET, BODY"')])]),e._v(" "),a("h2",{attrs:{id:"_2-8-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-0","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.8.0")]),e._v(" "),a("ul",[a("li",[e._v("Finding deep items in "),a("code",[e._v("ParameterBag::get()")]),e._v(" is deprecated since version 2.8 and\nwill be removed in 3.0.")])]),e._v(" "),a("h2",{attrs:{id:"_2-6-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-0","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.6.0")]),e._v(" "),a("ul",[a("li",[e._v("PdoSessionHandler changes\n"),a("ul",[a("li",[e._v("implemented different session locking strategies to prevent loss of data by concurrent access to the same session")]),e._v(" "),a("li",[e._v("[BC BREAK] save session data in a binary column without base64_encode")]),e._v(" "),a("li",[e._v("[BC BREAK] added lifetime column to the session table which allows to have different lifetimes for each session")]),e._v(" "),a("li",[e._v("implemented lazy connections that are only opened when a session is used by either passing a dsn string\nexplicitly or falling back to session.save_path ini setting")]),e._v(" "),a("li",[e._v("added a createTable method that initializes a correctly defined table depending on the database vendor")])])])]),e._v(" "),a("h2",{attrs:{id:"_2-5-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-0","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.5.0")]),e._v(" "),a("ul",[a("li",[e._v("added "),a("code",[e._v("JsonResponse::setEncodingOptions()")]),e._v(" & "),a("code",[e._v("JsonResponse::getEncodingOptions()")]),e._v(" for easier manipulation\nof the options used while encoding data to JSON format.")])]),e._v(" "),a("h2",{attrs:{id:"_2-4-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-0","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.4.0")]),e._v(" "),a("ul",[a("li",[e._v("added RequestStack")]),e._v(" "),a("li",[e._v("added Request::getEncodings()")]),e._v(" "),a("li",[e._v("added accessors methods to session handlers")])]),e._v(" "),a("h2",{attrs:{id:"_2-3-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-0","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.3.0")]),e._v(" "),a("ul",[a("li",[e._v("added support for ranges of IPs in trusted proxies")]),e._v(" "),a("li",[a("code",[e._v("UploadedFile::isValid")]),e._v(" now returns false if the file was not uploaded via HTTP (in a non-test mode)")]),e._v(" "),a("li",[e._v("Improved error-handling of "),a("code",[e._v("\\Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler")]),e._v("\nto ensure the supplied PDO handler throws Exceptions on error (as the class expects). Added related test cases\nto verify that Exceptions are properly thrown when the PDO queries fail.")])]),e._v(" "),a("h2",{attrs:{id:"_2-2-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-0","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.2.0")]),e._v(" "),a("ul",[a("li",[e._v("fixed the Request::create() precedence (URI information always take precedence now)")]),e._v(" "),a("li",[e._v("added Request::getTrustedProxies()")]),e._v(" "),a("li",[e._v("deprecated Request::isProxyTrusted()")]),e._v(" "),a("li",[e._v("[BC BREAK] JsonResponse does not turn a top level empty array to an object anymore, use an ArrayObject to enforce objects")]),e._v(" "),a("li",[e._v("added a IpUtils class to check if an IP belongs to a CIDR")]),e._v(" "),a("li",[e._v('added Request::getRealMethod() to get the "real" HTTP method (getMethod() returns the "intended" HTTP method)')]),e._v(" "),a("li",[e._v("disabled _method request parameter support by default (call Request::enableHttpMethodParameterOverride() to\nenable it, and Request::getHttpMethodParameterOverride() to check if it is supported)")]),e._v(" "),a("li",[e._v("Request::splitHttpAcceptHeader() method is deprecated and will be removed in 2.3")]),e._v(" "),a("li",[e._v("Deprecated Flashbag::count() and \\Countable interface, will be removed in 2.3")])]),e._v(" "),a("h2",{attrs:{id:"_2-1-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-0","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.1.0")]),e._v(" "),a("ul",[a("li",[e._v("added Request::getSchemeAndHttpHost() and Request::getUserInfo()")]),e._v(" "),a("li",[e._v("added a fluent interface to the Response class")]),e._v(" "),a("li",[e._v("added Request::isProxyTrusted()")]),e._v(" "),a("li",[e._v("added JsonResponse")]),e._v(" "),a("li",[e._v("added a getTargetUrl method to RedirectResponse")]),e._v(" "),a("li",[e._v("added support for streamed responses")]),e._v(" "),a("li",[e._v("made Response::prepare() method the place to enforce HTTP specification")]),e._v(" "),a("li",[e._v("[BC BREAK] moved management of the locale from the Session class to the Request class")]),e._v(" "),a("li",[e._v("added a generic access to the PHP built-in filter mechanism: ParameterBag::filter()")]),e._v(" "),a("li",[e._v("made FileBinaryMimeTypeGuesser command configurable")]),e._v(" "),a("li",[e._v("added Request::getUser() and Request::getPassword()")]),e._v(" "),a("li",[e._v("added support for the PATCH method in Request")]),e._v(" "),a("li",[e._v("removed the ContentTypeMimeTypeGuesser class as it is deprecated and never used on PHP 5.3")]),e._v(" "),a("li",[e._v("added ResponseHeaderBag::makeDisposition() (implements RFC 6266)")]),e._v(" "),a("li",[e._v("made mimetype to extension conversion configurable")]),e._v(" "),a("li",[e._v("[BC BREAK] Moved all session related classes and interfaces into own namespace, as\n"),a("code",[e._v("Symfony\\Component\\HttpFoundation\\Session")]),e._v(" and renamed classes accordingly.\nSession handlers are located in the subnamespace "),a("code",[e._v("Symfony\\Component\\HttpFoundation\\Session\\Handler")]),e._v(".")]),e._v(" "),a("li",[e._v("SessionHandlers must implement "),a("code",[e._v("\\SessionHandlerInterface")]),e._v(" or extend from the\n"),a("code",[e._v("Symfony\\Component\\HttpFoundation\\Storage\\Handler\\NativeSessionHandler")]),e._v(" base class.")]),e._v(" "),a("li",[e._v("Added internal storage driver proxy mechanism for forward compatibility with\nPHP 5.4 "),a("code",[e._v("\\SessionHandler")]),e._v(" class.")]),e._v(" "),a("li",[e._v("Added session handlers for custom Memcache, Memcached and Null session save handlers.")]),e._v(" "),a("li",[e._v("[BC BREAK] Removed "),a("code",[e._v("NativeSessionStorage")]),e._v(" and replaced with "),a("code",[e._v("NativeFileSessionHandler")]),e._v(".")]),e._v(" "),a("li",[e._v("[BC BREAK] "),a("code",[e._v("SessionStorageInterface")]),e._v(" methods removed: "),a("code",[e._v("write()")]),e._v(", "),a("code",[e._v("read()")]),e._v(" and\n"),a("code",[e._v("remove()")]),e._v(".  Added "),a("code",[e._v("getBag()")]),e._v(", "),a("code",[e._v("registerBag()")]),e._v(".  The "),a("code",[e._v("NativeSessionStorage")]),e._v(" class\nis a mediator for the session storage internals including the session handlers\nwhich do the real work of participating in the internal PHP session workflow.")]),e._v(" "),a("li",[e._v("[BC BREAK] Introduced mock implementations of "),a("code",[e._v("SessionStorage")]),e._v(" to enable unit\nand functional testing without starting real PHP sessions.  Removed\n"),a("code",[e._v("ArraySessionStorage")]),e._v(", and replaced with "),a("code",[e._v("MockArraySessionStorage")]),e._v(" for unit\ntests; removed "),a("code",[e._v("FilesystemSessionStorage")]),e._v(", and replaced with"),a("code",[e._v("MockFileSessionStorage")]),e._v("\nfor functional tests.  These do not interact with global session ini\nconfiguration values, session functions or "),a("code",[e._v("$_SESSION")]),e._v(" superglobal. This means\nthey can be configured directly allowing multiple instances to work without\nconflicting in the same PHP process.")]),e._v(" "),a("li",[e._v("[BC BREAK] Removed the "),a("code",[e._v("close()")]),e._v(" method from the "),a("code",[e._v("Session")]),e._v(" class, as this is\nnow redundant.")]),e._v(" "),a("li",[e._v("Deprecated the following methods from the Session class: "),a("code",[e._v("setFlash()")]),e._v(", "),a("code",[e._v("setFlashes()")]),e._v(" "),a("code",[e._v("getFlash()")]),e._v(", "),a("code",[e._v("hasFlash()")]),e._v(", and "),a("code",[e._v("removeFlash()")]),e._v(". Use "),a("code",[e._v("getFlashBag()")]),e._v(" instead\nwhich returns a "),a("code",[e._v("FlashBagInterface")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("Session->clear()")]),e._v(" now only clears session attributes as before it cleared\nflash messages and attributes. "),a("code",[e._v("Session->getFlashBag()->all()")]),e._v(" clears flashes now.")]),e._v(" "),a("li",[e._v("Session data is now managed by "),a("code",[e._v("SessionBagInterface")]),e._v(" to better encapsulate\nsession data.")]),e._v(" "),a("li",[e._v("Refactored session attribute and flash messages system to their own\n"),a("code",[e._v("SessionBagInterface")]),e._v(" implementations.")]),e._v(" "),a("li",[e._v("Added "),a("code",[e._v("FlashBag")]),e._v(". Flashes expire when retrieved by "),a("code",[e._v("get()")]),e._v(" or "),a("code",[e._v("all()")]),e._v(". This\nimplementation is ESI compatible.")]),e._v(" "),a("li",[e._v("Added "),a("code",[e._v("AutoExpireFlashBag")]),e._v(" (default) to replicate Symfony 2.0.x auto expire\nbehaviour of messages auto expiring after one page page load.  Messages must\nbe retrieved by "),a("code",[e._v("get()")]),e._v(" or "),a("code",[e._v("all()")]),e._v(".")]),e._v(" "),a("li",[e._v("Added "),a("code",[e._v("Symfony\\Component\\HttpFoundation\\Attribute\\AttributeBag")]),e._v(" to replicate\nattributes storage behaviour from 2.0.x (default).")]),e._v(" "),a("li",[e._v("Added "),a("code",[e._v("Symfony\\Component\\HttpFoundation\\Attribute\\NamespacedAttributeBag")]),e._v(" for\nnamespace session attributes.")]),e._v(" "),a("li",[e._v("Flash API can stores messages in an array so there may be multiple messages\nper flash type.  The old "),a("code",[e._v("Session")]),e._v(" class API remains without BC break as it\nwill allow single messages as before.")]),e._v(" "),a("li",[e._v("Added basic session meta-data to the session to record session create time,\nlast updated time, and the lifetime of the session cookie that was provided\nto the client.")]),e._v(" "),a("li",[e._v("Request::getClientIp() method doesn't take a parameter anymore but bases\nitself on the trustProxy parameter.")]),e._v(" "),a("li",[e._v("Added isMethod() to Request object.")]),e._v(" "),a("li",[e._v("[BC BREAK] The methods "),a("code",[e._v("getPathInfo()")]),e._v(", "),a("code",[e._v("getBaseUrl()")]),e._v(" and "),a("code",[e._v("getBasePath()")]),e._v(" of\na "),a("code",[e._v("Request")]),e._v(" now all return a raw value (vs a urldecoded value before). Any call\nto one of these methods must be checked and wrapped in a "),a("code",[e._v("rawurldecode()")]),e._v(" if\nneeded.")])])])}],!1,null,null,null);t.default=o.exports}}]);