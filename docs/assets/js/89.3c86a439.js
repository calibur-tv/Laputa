(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{375:function(e,t,r){"use strict";r.r(t);var a=r(0),n=Object(a.a)({},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",{staticClass:"content"},[e._m(0),e._v(" "),r("p",[r("a",{attrs:{href:"http://travis-ci.org/padraic/mockery",target:"_blank",rel:"noopener noreferrer"}},[r("img",{attrs:{src:"https://travis-ci.org/padraic/mockery.png?branch=master",alt:"Build Status"}}),r("OutboundLink")],1),e._v(" "),r("a",{attrs:{href:"https://packagist.org/packages/mockery/mockery",target:"_blank",rel:"noopener noreferrer"}},[r("img",{attrs:{src:"https://poser.pugx.org/mockery/mockery/v/stable.png",alt:"Latest Stable Version"}}),r("OutboundLink")],1),e._v(" "),r("a",{attrs:{href:"https://packagist.org/packages/mockery/mockery",target:"_blank",rel:"noopener noreferrer"}},[r("img",{attrs:{src:"https://poser.pugx.org/mockery/mockery/downloads.png",alt:"Total Downloads"}}),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("Mockery is a simple yet flexible PHP mock object framework for use in unit testing\nwith PHPUnit, PHPSpec or any other testing framework. Its core goal is to offer a\ntest double framework with a succinct API capable of clearly defining all possible\nobject operations and interactions using a human readable Domain Specific Language\n(DSL). Designed as a drop in alternative to PHPUnit's phpunit-mock-objects library,\nMockery is easy to integrate with PHPUnit and can operate alongside\nphpunit-mock-objects without the World ending.")]),e._v(" "),r("p",[e._v("Mockery is released under a New BSD License.")]),e._v(" "),r("p",[e._v("The current released version on Packagist is 0.9.3.\nThe current released version for PEAR is 0.9.0. Composer users may instead opt to use\nthe current master branch aliased to 0.9.x-dev.")]),e._v(" "),e._m(1),e._v(" "),r("p",[e._v("To install Mockery, run the command below and you will get the latest\nversion")]),e._v(" "),e._m(2),r("p",[e._v("If you want to run the tests:")]),e._v(" "),e._m(3),r("p",[e._v("####Note")]),e._v(" "),r("p",[e._v("The future Mockery 0.9.4 release will be the final version to have PHP 5.3\nas a minimum requirement. The minimum PHP requirement will thereafter move to\nPHP 5.4. Also, the PEAR channel will go offline permanently no earlier than 30\nJune 2015.")]),e._v(" "),e._m(4),e._v(" "),r("p",[e._v("In unit tests, mock objects simulate the behaviour of real objects. They are\ncommonly utilised to offer test isolation, to stand in for objects which do not\nyet exist, or to allow for the exploratory design of class APIs without\nrequiring actual implementation up front.")]),e._v(" "),r("p",[e._v("The benefits of a mock object framework are to allow for the flexible generation\nof such mock objects (and stubs). They allow the setting of expected method calls\nand return values using a flexible API which is capable of capturing every\npossible real object behaviour in way that is stated as close as possible to a\nnatural language description.")]),e._v(" "),e._m(5),e._v(" "),r("p",[e._v("Mockery requires PHP 5.3.2 or greater. In addition, it is recommended to install\nthe Hamcrest library (see below for instructions) which contains additional\nmatchers used when defining expected method arguments.")]),e._v(" "),e._m(6),e._v(" "),r("p",[e._v("The current version can be seen at "),r("a",{attrs:{href:"http://docs.mockery.io",target:"_blank",rel:"noopener noreferrer"}},[e._v("docs.mockery.io"),r("OutboundLink")],1),e._v(".")])])},[function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"mockery"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mockery","aria-hidden":"true"}},[this._v("#")]),this._v(" Mockery")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"installation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#installation","aria-hidden":"true"}},[this._v("#")]),this._v(" Installation")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("composer require mockery/mockery\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("vendor/bin/phpunit\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"mock-objects"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mock-objects","aria-hidden":"true"}},[this._v("#")]),this._v(" Mock Objects")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"prerequisites"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#prerequisites","aria-hidden":"true"}},[this._v("#")]),this._v(" Prerequisites")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"documentation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#documentation","aria-hidden":"true"}},[this._v("#")]),this._v(" Documentation")])}],!1,null,null,null);t.default=n.exports}}]);