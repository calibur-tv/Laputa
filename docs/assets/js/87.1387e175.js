(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{378:function(e,t,o){"use strict";o.r(t);var a=o(0),i=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("div",{staticClass:"content"},[o("h1",{attrs:{id:"change-log"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#change-log","aria-hidden":"true"}},[e._v("#")]),e._v(" Change Log")]),e._v(" "),o("h2",{attrs:{id:"_0-9-4-xxxx-xx-xx"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_0-9-4-xxxx-xx-xx","aria-hidden":"true"}},[e._v("#")]),e._v(" 0.9.4 (XXXX-XX-XX)")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("shouldIgnoreMissing")]),e._v(" will respect global "),o("code",[e._v("allowMockingNonExistentMethods")]),e._v("\nconfig")]),e._v(" "),o("li",[e._v("Some support for variadic parameters")]),e._v(" "),o("li",[e._v("Hamcrest is now a required dependency")]),e._v(" "),o("li",[e._v("Instance mocks now respect "),o("code",[e._v("shouldIgnoreMissing")]),e._v(" call on control instance")]),e._v(" "),o("li",[e._v("This will be the "),o("em",[e._v("last version to support PHP 5.3")])]),e._v(" "),o("li",[e._v("Added "),o("code",[e._v("Mockery\\Adapter\\Phpunit\\MockeryPHPUnitIntegration")]),e._v(" trait")]),e._v(" "),o("li",[e._v("Added "),o("code",[e._v("makePartial")]),e._v(" to "),o("code",[e._v("Mockery\\MockInterface")]),e._v(" as it was missing")])]),e._v(" "),o("h2",{attrs:{id:"_0-9-3-2014-12-22"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_0-9-3-2014-12-22","aria-hidden":"true"}},[e._v("#")]),e._v(" 0.9.3 (2014-12-22)")]),e._v(" "),o("ul",[o("li",[e._v("Added a basic spy implementation")]),e._v(" "),o("li",[e._v("Added "),o("code",[e._v("Mockery\\Adapter\\Phpunit\\MockeryTestCase")]),e._v(" for more reliable PHPUnit\nintegration")])]),e._v(" "),o("h2",{attrs:{id:"_0-9-2-2014-09-03"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_0-9-2-2014-09-03","aria-hidden":"true"}},[e._v("#")]),e._v(" 0.9.2 (2014-09-03)")]),e._v(" "),o("ul",[o("li",[e._v("Some workarounds for the serilisation problems created by changes to PHP in 5.5.13, 5.4.29,\n5.6.")]),e._v(" "),o("li",[e._v("Demeter chains attempt to reuse doubles as they see fit, so for foo->bar and\nfoo->baz, we'll attempt to use the same foo")])]),e._v(" "),o("h2",{attrs:{id:"_0-9-1-2014-05-02"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_0-9-1-2014-05-02","aria-hidden":"true"}},[e._v("#")]),e._v(" 0.9.1 (2014-05-02)")]),e._v(" "),o("ul",[o("li",[e._v("Allow specifying consecutive exceptions to be thrown with "),o("code",[e._v("andThrowExceptions")])]),e._v(" "),o("li",[e._v("Allow specifying methods which can be mocked when using\n"),o("code",[e._v("Mockery\\Configuration::allowMockingNonExistentMethods(false)")]),e._v(" with\n"),o("code",[e._v("Mockery\\MockInterface::shouldAllowMockingMethod($methodName)")])]),e._v(" "),o("li",[e._v("Added andReturnSelf method: "),o("code",[e._v('$mock->shouldReceive("foo")->andReturnSelf()')])]),e._v(" "),o("li",[o("code",[e._v("shouldIgnoreMissing")]),e._v(" now takes an optional value that will be return instead\nof null, e.g. "),o("code",[e._v("$mock->shouldIgnoreMissing($mock)")])])]),e._v(" "),o("h2",{attrs:{id:"_0-9-0-2014-02-05"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_0-9-0-2014-02-05","aria-hidden":"true"}},[e._v("#")]),e._v(" 0.9.0 (2014-02-05)")]),e._v(" "),o("ul",[o("li",[e._v("Allow mocking classes with final __wakeup() method")]),e._v(" "),o("li",[e._v("Quick definitions are now always "),o("code",[e._v("byDefault")])]),e._v(" "),o("li",[e._v("Allow mocking of protected methods with "),o("code",[e._v("shouldAllowMockingProtectedMethods")])]),e._v(" "),o("li",[e._v("Support official Hamcrest package")]),e._v(" "),o("li",[e._v("Generator completely rewritten")]),e._v(" "),o("li",[e._v("Easily create named mocks with namedMock")])])])}],!1,null,null,null);t.default=i.exports}}]);