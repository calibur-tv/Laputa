(window.webpackJsonp=window.webpackJsonp||[]).push([[199],{213:function(e,a,t){"use strict";t.r(a);var d=t(0),o=Object(d.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("div",{staticClass:"content"},[t("h1",{attrs:{id:"changelog"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#changelog","aria-hidden":"true"}},[e._v("#")]),e._v(" CHANGELOG")]),e._v(" "),t("h2",{attrs:{id:"_3-4-0"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-0","aria-hidden":"true"}},[e._v("#")]),e._v(" 3.4.0")]),e._v(" "),t("ul",[t("li",[e._v("added "),t("code",[e._v("SHELL_VERBOSITY")]),e._v(" env var to control verbosity")]),e._v(" "),t("li",[e._v("added "),t("code",[e._v("CommandLoaderInterface")]),e._v(", "),t("code",[e._v("FactoryCommandLoader")]),e._v(" and PSR-11\n"),t("code",[e._v("ContainerCommandLoader")]),e._v(" for commands lazy-loading")]),e._v(" "),t("li",[e._v("added a case-insensitive command name matching fallback")]),e._v(" "),t("li",[e._v("added static "),t("code",[e._v("Command::$defaultName/getDefaultName()")]),e._v(", allowing for\ncommands to be registered at compile time in the application command loader.\nSetting the "),t("code",[e._v("$defaultName")]),e._v(" property avoids the need for filling the "),t("code",[e._v("command")]),e._v("\nattribute on the "),t("code",[e._v("console.command")]),e._v(" tag when using "),t("code",[e._v("AddConsoleCommandPass")]),e._v(".")])]),e._v(" "),t("h2",{attrs:{id:"_3-3-0"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-0","aria-hidden":"true"}},[e._v("#")]),e._v(" 3.3.0")]),e._v(" "),t("ul",[t("li",[e._v("added "),t("code",[e._v("ExceptionListener")])]),e._v(" "),t("li",[e._v("added "),t("code",[e._v("AddConsoleCommandPass")]),e._v(" (originally in FrameworkBundle)")]),e._v(" "),t("li",[e._v("[BC BREAK] "),t("code",[e._v("Input::getOption()")]),e._v(" no longer returns the default value for options\nwith value optional explicitly passed empty")]),e._v(" "),t("li",[e._v("added console.error event to catch exceptions thrown by other listeners")]),e._v(" "),t("li",[e._v("deprecated console.exception event in favor of console.error")]),e._v(" "),t("li",[e._v("added ability to handle "),t("code",[e._v("CommandNotFoundException")]),e._v(" through the\n"),t("code",[e._v("console.error")]),e._v(" event")]),e._v(" "),t("li",[e._v("deprecated default validation in "),t("code",[e._v("SymfonyQuestionHelper::ask")])])]),e._v(" "),t("h2",{attrs:{id:"_3-2-0"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-0","aria-hidden":"true"}},[e._v("#")]),e._v(" 3.2.0")]),e._v(" "),t("ul",[t("li",[e._v("added "),t("code",[e._v("setInputs()")]),e._v(" method to CommandTester for ease testing of commands expecting inputs")]),e._v(" "),t("li",[e._v("added "),t("code",[e._v("setStream()")]),e._v(" and "),t("code",[e._v("getStream()")]),e._v(" methods to Input (implement StreamableInputInterface)")]),e._v(" "),t("li",[e._v("added StreamableInputInterface")]),e._v(" "),t("li",[e._v("added LockableTrait")])]),e._v(" "),t("h2",{attrs:{id:"_3-1-0"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-0","aria-hidden":"true"}},[e._v("#")]),e._v(" 3.1.0")]),e._v(" "),t("ul",[t("li",[e._v("added truncate method to FormatterHelper")]),e._v(" "),t("li",[e._v("added setColumnWidth(s) method to Table")])]),e._v(" "),t("h2",{attrs:{id:"_2-8-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-3","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.8.3")]),e._v(" "),t("ul",[t("li",[e._v("remove readline support from the question helper as it caused issues")])]),e._v(" "),t("h2",{attrs:{id:"_2-8-0"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-0","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.8.0")]),e._v(" "),t("ul",[t("li",[e._v("use readline for user input in the question helper when available to allow\nthe use of arrow keys")])]),e._v(" "),t("h2",{attrs:{id:"_2-6-0"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-0","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.6.0")]),e._v(" "),t("ul",[t("li",[e._v("added a Process helper")]),e._v(" "),t("li",[e._v("added a DebugFormatter helper")])]),e._v(" "),t("h2",{attrs:{id:"_2-5-0"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-0","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.5.0")]),e._v(" "),t("ul",[t("li",[e._v("deprecated the dialog helper (use the question helper instead)")]),e._v(" "),t("li",[e._v("deprecated TableHelper in favor of Table")]),e._v(" "),t("li",[e._v("deprecated ProgressHelper in favor of ProgressBar")]),e._v(" "),t("li",[e._v("added ConsoleLogger")]),e._v(" "),t("li",[e._v("added a question helper")]),e._v(" "),t("li",[e._v("added a way to set the process name of a command")]),e._v(" "),t("li",[e._v("added a way to set a default command instead of "),t("code",[e._v("ListCommand")])])]),e._v(" "),t("h2",{attrs:{id:"_2-4-0"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-0","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.4.0")]),e._v(" "),t("ul",[t("li",[e._v("added a way to force terminal dimensions")]),e._v(" "),t("li",[e._v("added a convenient method to detect verbosity level")]),e._v(" "),t("li",[e._v("[BC BREAK] made descriptors use output instead of returning a string")])]),e._v(" "),t("h2",{attrs:{id:"_2-3-0"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-0","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.3.0")]),e._v(" "),t("ul",[t("li",[e._v("added multiselect support to the select dialog helper")]),e._v(" "),t("li",[e._v("added Table Helper for tabular data rendering")]),e._v(" "),t("li",[e._v("added support for events in "),t("code",[e._v("Application")])]),e._v(" "),t("li",[e._v("added a way to normalize EOLs in "),t("code",[e._v("ApplicationTester::getDisplay()")]),e._v(" and "),t("code",[e._v("CommandTester::getDisplay()")])]),e._v(" "),t("li",[e._v("added a way to set the progress bar progress via the "),t("code",[e._v("setCurrent")]),e._v(" method")]),e._v(" "),t("li",[e._v("added support for multiple InputOption shortcuts, written as "),t("code",[e._v("'-a|-b|-c'")])]),e._v(" "),t("li",[e._v("added two additional verbosity levels, VERBOSITY_VERY_VERBOSE and VERBOSITY_DEBUG")])]),e._v(" "),t("h2",{attrs:{id:"_2-2-0"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-0","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.2.0")]),e._v(" "),t("ul",[t("li",[e._v("added support for colorization on Windows via ConEmu")]),e._v(" "),t("li",[e._v("add a method to Dialog Helper to ask for a question and hide the response")]),e._v(" "),t("li",[e._v("added support for interactive selections in console (DialogHelper::select())")]),e._v(" "),t("li",[e._v("added support for autocompletion as you type in Dialog Helper")])]),e._v(" "),t("h2",{attrs:{id:"_2-1-0"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-0","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.1.0")]),e._v(" "),t("ul",[t("li",[e._v("added ConsoleOutputInterface")]),e._v(" "),t("li",[e._v("added the possibility to disable a command (Command::isEnabled())")]),e._v(" "),t("li",[e._v("added suggestions when a command does not exist")]),e._v(" "),t("li",[e._v("added a --raw option to the list command")]),e._v(" "),t("li",[e._v("added support for STDERR in the console output class (errors are now sent\nto STDERR)")]),e._v(" "),t("li",[e._v("made the defaults (helper set, commands, input definition) in Application\nmore easily customizable")]),e._v(" "),t("li",[e._v("added support for the shell even if readline is not available")]),e._v(" "),t("li",[e._v("added support for process isolation in Symfony shell via\n"),t("code",[e._v("--process-isolation")]),e._v(" switch")]),e._v(" "),t("li",[e._v("added support for "),t("code",[e._v("--")]),e._v(", which disables options parsing after that point\n(tokens will be parsed as arguments)")])])])}],!1,null,null,null);a.default=o.exports}}]);