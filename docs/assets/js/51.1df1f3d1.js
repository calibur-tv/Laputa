(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{385:function(t,a,s){"use strict";s.r(a);var e=s(0),n=Object(e.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[t._m(0),t._v(" "),s("p",[s("a",{attrs:{href:"https://scrutinizer-ci.com/g/hamcrest/hamcrest-php/",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"https://scrutinizer-ci.com/g/hamcrest/hamcrest-php/badges/quality-score.png?s=754f5c0556419fc6204917ca9a9dcf2fa2b45ed0",alt:"Scrutinizer Quality Score"}}),s("OutboundLink")],1),t._v(" "),s("a",{attrs:{href:"https://travis-ci.org/hamcrest/hamcrest-php",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"https://travis-ci.org/hamcrest/hamcrest-php.png?branch=master",alt:"Build Status"}}),s("OutboundLink")],1),t._v(" "),s("a",{attrs:{href:"https://coveralls.io/r/hamcrest/hamcrest-php",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"https://coveralls.io/repos/hamcrest/hamcrest-php/badge.png",alt:"Coverage Status"}}),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("Hamcrest is a matching library originally written for Java, but\nsubsequently ported to many other languages.  hamcrest-php is the\nofficial PHP port of Hamcrest and essentially follows a literal\ntranslation of the original Java API for Hamcrest, with a few\nExceptions, mostly down to PHP language barriers:")]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),s("p",[t._v("Hamcrest matchers are easy to use as:")]),t._v(" "),t._m(3),s("p",[t._v("** [Unless we consider POPO's (Plain Old PHP Objects) akin to JavaBeans]\n- The POPO thing is a joke.  Java devs coin the term POJO's (Plain Old\nJava Objects).")])])},[function(){var t=this.$createElement,a=this._self._c||t;return a("h1",{attrs:{id:"this-is-the-php-port-of-hamcrest-matchers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#this-is-the-php-port-of-hamcrest-matchers","aria-hidden":"true"}},[this._v("#")]),this._v(" This is the PHP port of Hamcrest Matchers")])},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ol",[s("li",[s("p",[s("code",[t._v("instanceOf($theClass)")]),t._v(" is actually "),s("code",[t._v("anInstanceOf($theClass)")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("both(containsString('a'))->and(containsString('b'))")]),t._v("\nis actually "),s("code",[t._v("both(containsString('a'))->andAlso(containsString('b'))")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("either(containsString('a'))->or(containsString('b'))")]),t._v("\nis actually "),s("code",[t._v("either(containsString('a'))->orElse(containsString('b'))")])])]),t._v(" "),s("li",[s("p",[t._v('Unless it would be non-semantic for a matcher to do so, hamcrest-php\nallows dynamic typing for it\'s input, in "the PHP way". Exception are\nwhere semantics surrounding the type itself would suggest otherwise,\nsuch as stringContains() and greaterThan().')])]),t._v(" "),s("li",[s("p",[t._v("Several official matchers have not been ported because they don't\nmake sense or don't apply in PHP:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("typeCompatibleWith($theClass)")])]),t._v(" "),s("li",[s("code",[t._v("eventFrom($source)")])]),t._v(" "),s("li",[s("code",[t._v("hasProperty($name)")]),t._v(" **")]),t._v(" "),s("li",[s("code",[t._v("samePropertyValuesAs($obj)")]),t._v(" **")])])]),t._v(" "),s("li",[s("p",[t._v("When most of the collections matchers are finally ported, PHP-specific\naliases will probably be created due to a difference in naming\nconventions between Java's Arrays, Collections, Sets and Maps compared\nwith PHP's Arrays.")])])])},function(){var t=this.$createElement,a=this._self._c||t;return a("h2",{attrs:{id:"usage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage","aria-hidden":"true"}},[this._v("#")]),this._v(" Usage")])},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[t._v("Hamcrest_MatcherAssert"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token function"}},[t._v("assertThat")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'a'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Hamcrest_Matchers"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token function"}},[t._v("equalToIgnoringCase")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'A'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])}],!1,null,null,null);a.default=n.exports}}]);