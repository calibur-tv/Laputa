(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{301:function(e,a,t){"use strict";t.r(a);var c=t(0),n=Object(c.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("div",{staticClass:"content"},[t("h1",{attrs:{id:"upgrade-to-1-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#upgrade-to-1-4","aria-hidden":"true"}},[e._v("#")]),e._v(" Upgrade to 1.4")]),e._v(" "),t("h2",{attrs:{id:"minor-bc-break-doctrine-common-cache-filecache-extension-is-now-private"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#minor-bc-break-doctrine-common-cache-filecache-extension-is-now-private","aria-hidden":"true"}},[e._v("#")]),e._v(" Minor BC Break: "),t("code",[e._v("Doctrine\\Common\\Cache\\FileCache#$extension")]),e._v(" is now "),t("code",[e._v("private")]),e._v(".")]),e._v(" "),t("p",[e._v("If you need to override the value of "),t("code",[e._v("Doctrine\\Common\\Cache\\FileCache#$extension")]),e._v(", then use the\nsecond parameter of "),t("code",[e._v("Doctrine\\Common\\Cache\\FileCache#__construct()")]),e._v(" instead of overriding\nthe property in your own implementation.")]),e._v(" "),t("h2",{attrs:{id:"minor-bc-break-file-based-caches-paths-changed"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#minor-bc-break-file-based-caches-paths-changed","aria-hidden":"true"}},[e._v("#")]),e._v(" Minor BC Break: file based caches paths changed")]),e._v(" "),t("p",[t("code",[e._v("Doctrine\\Common\\Cache\\FileCache")]),e._v(", "),t("code",[e._v("Doctrine\\Common\\Cache\\PhpFileCache")]),e._v(" and\n"),t("code",[e._v("Doctrine\\Common\\Cache\\FilesystemCache")]),e._v(" are using a different cache paths structure.")]),e._v(" "),t("p",[e._v("If you rely on warmed up caches for deployments, consider that caches generated\nwith "),t("code",[e._v("doctrine/cache")]),e._v(" "),t("code",[e._v("<1.4")]),e._v(" are not compatible with the new directory structure,\nand will be ignored.")])])}],!1,null,null,null);a.default=n.exports}}]);