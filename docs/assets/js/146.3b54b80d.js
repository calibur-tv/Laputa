(window.webpackJsonp=window.webpackJsonp||[]).push([[146],{290:function(t,e,s){"use strict";s.r(e);var n=s(0),a=Object(n.a)({},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[t._m(0),t._v(" "),s("hr"),t._v(" "),t._m(1),t._v(" "),s("p",[t._v("The main point of Predis is about offering a highly customizable and extensible client for Redis,\nthat can be easily extended by developers while still being reasonabily fast. With Predis you can\nswap almost any class with your own custom implementation: you can have custom connection classes,\nnew distribution strategies for client-side sharding, or handlers to replace or add Redis commands.\nAll of this can be achieved without messing with the source code of the library and directly in your\nown application. Given the fast pace at which Redis is developed and adds new features, this can be\na great asset since it allows developers to add new and still missing features or commands or change\nthe standard behaviour of the library without the need to break dependencies in production code (at\nleast to some degree).")]),t._v(" "),t._m(2),t._v(" "),s("p",[t._v("Yes. Obviously persistent connections actually work only when using PHP configured as a persistent\nprocess reused by the web server (see "),s("a",{attrs:{href:"http://php-fpm.org",target:"_blank",rel:"noopener noreferrer"}},[t._v("PHP-FPM"),s("OutboundLink")],1),t._v(").")]),t._v(" "),t._m(3),t._v(" "),s("p",[t._v("Yes. Encrypted connections are mostly useful when connecting to Redis instances exposed by various\ncloud hosting providers without the need to configure an SSL proxy, but you should also take into\naccount the general performances degradation especially during the connect() operation when the TLS\nhandshake must be performed to secure the connection. Persistent SSL-encrypted connections may help\nin that respect, but they are supported only when running on PHP >= 7.0.0.")]),t._v(" "),t._m(4),t._v(" "),s("p",[t._v("No and it will not ever do that by default. The reason behind this decision is that serialization is\nusually something that developers prefer to customize depending on their needs and can not be easily\ngeneralized when using Redis because of the many possible access patterns for your data. This does\nnot mean that it is impossible to have such a feature since you can leverage the extensibility of\nthis library to define your own serialization-aware commands. You can find more details about how to\ndo that "),s("a",{attrs:{href:"http://github.com/nrk/predis/issues/29#issuecomment-1202624",target:"_blank",rel:"noopener noreferrer"}},[t._v("on this issue"),s("OutboundLink")],1),t._v(".")]),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._m(8),t._v(" "),s("p",[t._v("The approach used to implement Redis commands is quite simple: by default each command follows the\nsame signature as defined on the "),s("a",{attrs:{href:"http://redis.io/commands",target:"_blank",rel:"noopener noreferrer"}},[t._v("Redis documentation"),s("OutboundLink")],1),t._v(" which makes things\npretty easy if you already know how Redis works or you need to look up how to use certain commands.\nAlternatively, variadic commands can accept an array for keys or values (depending on the command)\ninstead of a list of arguments. Commands such as "),s("a",{attrs:{href:"http://redis.io/commands/rpush",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("RPUSH")]),s("OutboundLink")],1),t._v(" and\n"),s("a",{attrs:{href:"http://redis.io/commands/hmset",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("HMSET")]),s("OutboundLink")],1),t._v(" are great examples:")]),t._v(" "),t._m(9),s("p",[t._v("An exception to this rule is "),s("a",{attrs:{href:"http://redis.io/commands/sort",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("SORT")]),s("OutboundLink")],1),t._v(" for which modifiers are passed\n"),s("a",{attrs:{href:"tests/Predis/Command/KeySortTest.php#L54-L75"}},[t._v("using a named array")]),t._v(".")]),t._v(" "),t._m(10),t._v(" "),s("hr"),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),s("p",[t._v("How does it compare with "),s("a",{attrs:{href:"http://github.com/nicolasff/phpredis",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("phpredis")]),s("OutboundLink")],1),t._v(", a nice C extension\nproviding an efficient client for Redis?")]),t._v(" "),t._m(14),t._m(15),t._v(" "),s("p",[t._v("There is one more thing: we have tested the overhead of Predis by connecting on a localhost instance\nof Redis but how these numbers change when we hit the physical network by connecting to remote Redis\ninstances?")]),t._v(" "),t._m(16),s("p",[t._v("There you go, you get almost the same average numbers and the reason is simple: network latency is a\nreal performance killer and you cannot do (almost) anything about that. As a disclaimer, remember\nthat we are measuring the overhead of client libraries implementations and the effects of network\nround-trip times, so we are not really measuring how fast Redis is. Redis shines best with thousands\nof concurrent clients doing requests! Also, actual performances should be measured according to how\nyour application will use Redis.")]),t._v(" "),t._m(17),t._v(" "),s("p",[t._v("Fair enough, but there is an option available if you need even more speed and consists on installing\n"),s("strong",[s("a",{attrs:{href:"http://github.com/nrk/phpiredis",target:"_blank",rel:"noopener noreferrer"}},[t._v("phpiredis"),s("OutboundLink")],1)]),t._v(" (note the additional "),s("em",[t._v("i")]),t._v(" in the name) and let the\nclient use it. "),s("strong",[t._v("phpiredis")]),t._v(" is another C extension that wraps "),s("strong",[t._v("hiredis")]),t._v(" (the official C client\nlibrary for Redis) with a thin layer exposing its features to PHP. You can then choose between two\ndifferent connection classes:")]),t._v(" "),t._m(18),t._v(" "),s("p",[t._v("You will now get the benefits of a faster protocol serializer and parser just by adding a couple of\nlines of code:")]),t._v(" "),t._m(19),t._m(20),t._v(" "),t._m(21),t._m(22),t._v(" "),t._m(23)])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"some-frequently-asked-questions-about-predis"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#some-frequently-asked-questions-about-predis","aria-hidden":"true"}},[this._v("#")]),this._v(" Some frequently asked questions about Predis")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"what-is-the-point-of-predis"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#what-is-the-point-of-predis","aria-hidden":"true"}},[this._v("#")]),this._v(" What is the point of Predis?")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"does-predis-support-unix-domain-sockets-and-persistent-connections"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#does-predis-support-unix-domain-sockets-and-persistent-connections","aria-hidden":"true"}},[this._v("#")]),this._v(" Does Predis support UNIX domain sockets and persistent connections?")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"does-predis-support-ssl-encrypted-connections"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#does-predis-support-ssl-encrypted-connections","aria-hidden":"true"}},[this._v("#")]),this._v(" Does Predis support SSL-encrypted connections?")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"does-predis-support-transparent-de-serialization-of-values"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#does-predis-support-transparent-de-serialization-of-values","aria-hidden":"true"}},[this._v("#")]),this._v(" Does Predis support transparent (de)serialization of values?")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"how-can-i-force-predis-to-connect-to-redis-before-sending-any-command"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#how-can-i-force-predis-to-connect-to-redis-before-sending-any-command","aria-hidden":"true"}},[this._v("#")]),this._v(" How can I force Predis to connect to Redis before sending any command?")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Explicitly connecting to Redis is usually not needed since the client initializes connections lazily\nonly when they are needed. Admittedly, this behavior can be inconvenient in certain scenarios when\nyou absolutely need to perform an upfront check to determine if the server is up and running and\neventually catch exceptions on failures. Forcing the client to open the underlying connection can be\ndone by invoking "),e("code",[this._v("Predis\\Client::connect()")]),this._v(":")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{attrs:{class:"token variable"}},[t._v("$client")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("Predis"),s("span",{attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Client")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token variable"}},[t._v("$client")]),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),s("span",{attrs:{class:"token function"}},[t._v("connect")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token class-name"}},[t._v("Predis"),s("span",{attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Connection"),s("span",{attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("ConnectionException")]),t._v(" "),s("span",{attrs:{class:"token variable"}},[t._v("$exception")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token comment"}},[t._v("// We could not connect to Redis! Your handling code goes here.")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{attrs:{class:"token variable"}},[t._v("$client")]),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),s("span",{attrs:{class:"token function"}},[t._v("info")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"how-predis-abstracts-redis-commands"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#how-predis-abstracts-redis-commands","aria-hidden":"true"}},[this._v("#")]),this._v(" How Predis abstracts Redis commands?")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{attrs:{class:"token variable"}},[t._v("$client")]),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),s("span",{attrs:{class:"token function"}},[t._v("rpush")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'my:list'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'value1'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'value2'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'value3'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("             "),s("span",{attrs:{class:"token comment"}},[t._v("// plain method arguments")]),t._v("\n"),s("span",{attrs:{class:"token variable"}},[t._v("$client")]),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),s("span",{attrs:{class:"token function"}},[t._v("rpush")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'my:list'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'value1'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'value2'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'value3'")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("           "),s("span",{attrs:{class:"token comment"}},[t._v("// single argument array")]),t._v("\n\n"),s("span",{attrs:{class:"token variable"}},[t._v("$client")]),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),s("span",{attrs:{class:"token function"}},[t._v("hmset")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'my:hash'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'field1'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'value1'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'field2'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'value2'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{attrs:{class:"token comment"}},[t._v("// plain method arguments")]),t._v("\n"),s("span",{attrs:{class:"token variable"}},[t._v("$client")]),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),s("span",{attrs:{class:"token function"}},[t._v("hmset")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'my:hash'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'field1'")]),s("span",{attrs:{class:"token operator"}},[t._v("=")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),s("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'value1'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'field2'")]),s("span",{attrs:{class:"token operator"}},[t._v("=")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),s("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'value2'")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// single named array")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"speaking-about-performances"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#speaking-about-performances","aria-hidden":"true"}},[this._v("#")]),this._v(" Speaking about performances...")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"predis-is-a-pure-php-implementation-it-can-not-be-fast-enough"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#predis-is-a-pure-php-implementation-it-can-not-be-fast-enough","aria-hidden":"true"}},[this._v("#")]),this._v(" Predis is a pure-PHP implementation: it can not be fast enough!")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("It really depends, but most of the times the answer is: "),e("em",[this._v("yes, it is fast enough")]),this._v(". I will give you a\ncouple of easy numbers with a simple test that uses a single client and is executed by PHP 5.5.6\nagainst a local instance of Redis 2.8 that runs under Ubuntu 13.10 on a Intel Q6600:")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("21000 SET/sec using 12 bytes for both key and value.\n21000 GET/sec while retrieving the very same values.\n0.130 seconds to fetch 30000 keys using _KEYS *_.\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('30100 SET/sec using 12 bytes for both key and value\n29400 GET/sec while retrieving the very same values\n0.035 seconds to fetch 30000 keys using "KEYS *"".\n')])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("Wow "),s("strong",[t._v("phpredis")]),t._v(" seems much faster! Well, we are comparing a C extension with a pure-PHP library so\nlower numbers are quite expected but there is a fundamental flaw in them: is this really how you are\ngoing to use Redis in your application? Are you really going to send thousands of commands using a\nfor-loop on each page request using a single client instance? If so... well I guess you are probably\ndoing something wrong. Also, if you need to "),s("code",[t._v("SET")]),t._v(" or "),s("code",[t._v("GET")]),t._v(" multiple keys you should definitely use\ncommands such as "),s("code",[t._v("MSET")]),t._v(" and "),s("code",[t._v("MGET")]),t._v(". You can also use pipelining to get more performances when this\ntechnique can be used.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('Using Predis:\n3200 SET/sec using 12 bytes for both key and value\n3200 GET/sec while retrieving the very same values\n0.132 seconds to fetch 30000 keys using "KEYS *".\n\nUsing phpredis:\n3500 SET/sec using 12 bytes for both key and value\n3500 GET/sec while retrieving the very same values\n0.045 seconds to fetch 30000 keys using "KEYS *".\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"i-am-convinced-but-performances-for-multi-bulk-responses-are-still-worse"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#i-am-convinced-but-performances-for-multi-bulk-responses-are-still-worse","aria-hidden":"true"}},[this._v("#")]),this._v(" I am convinced, but performances for multi-bulk responses are still worse")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("code",[this._v("Predis\\Connection\\PhpiredisStreamConnection")]),this._v(" (using native PHP streams).")]),this._v(" "),e("li",[e("code",[this._v("Predis\\Connection\\PhpiredisSocketConnection")]),this._v(" (requires "),e("code",[this._v("ext-socket")]),this._v(").")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{attrs:{class:"token variable"}},[t._v("$client")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("Predis"),s("span",{attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Client")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'tcp://127.0.0.1'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("array")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),s("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'connections'")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("array")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),s("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'tcp'")]),t._v("  "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'Predis\\Connection\\PhpiredisStreamConnection'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'unix'")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'Predis\\Connection\\PhpiredisSocketConnection'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Dead simple. Nothing changes in the way you use the library in your application. So how fast is it\nour basic benchmark script now? There are not much improvements for inline or short bulk responses\nlike the ones returned by "),e("code",[this._v("SET")]),this._v(" and "),e("code",[this._v("GET")]),this._v(", but the speed for parsing multi-bulk responses is now on\npar with phpredis:")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("Fatching 30000 keys with _KEYS *_ using Predis paired with phpiredis::\n\n0.035 seconds from a local Redis instance\n0.047 seconds from a remote Redis instance\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"if-i-need-an-extension-to-get-better-performances-why-not-using-phpredis"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#if-i-need-an-extension-to-get-better-performances-why-not-using-phpredis","aria-hidden":"true"}},[this._v("#")]),this._v(" If I need an extension to get better performances, why not using phpredis?")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Good question. Generically speaking if you need absolute uber-speed using Redis on the localhost and\nyou do not care about abstractions built around some Redis features such as MULTI / EXEC, or if you\ndo not need any kind of extensibility or guaranteed backwards compatibility with different versions\nof Redis (Predis currently supports from 1.2 up to 2.8 and the current development version), then\nusing "),e("strong",[this._v("phpredis")]),this._v(" makes absolutely sense. Otherwise, Predis is perfect for the job and by adding\n"),e("strong",[this._v("phpiredis")]),this._v(" you can get a nice speed bump almost for free.")])}],!1,null,null,null);e.default=a.exports}}]);